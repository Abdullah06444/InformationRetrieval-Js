import { IndexType } from "./IndexType";
import { WordComparator } from "nlptoolkit-dictionary/dist/Dictionary/WordComparator";
import { MorphologicalDisambiguator } from "nlptoolkit-morphologicaldisambiguation/dist/MorphologicalDisambiguator";
import { FsmMorphologicalAnalyzer } from "nlptoolkit-morphologicalanalysis/dist/MorphologicalAnalysis/FsmMorphologicalAnalyzer";
import { DocumentType } from "./DocumentType";
export declare class Parameter {
    private indexType;
    private wordComparator;
    private indexesFromFile;
    private disambiguator;
    private fsm;
    private documentNormalization;
    private phraseIndex;
    private positionalIndex;
    private nGramIndex;
    private limitDocumentsLoaded;
    private documentLimit;
    private wordLimit;
    private documentType;
    private representativeCount;
    constructor();
    getIndexType(): IndexType;
    getWordComparator(): WordComparator;
    loadIndexesFromFile(): boolean;
    getDisambiguator(): MorphologicalDisambiguator;
    getFsm(): FsmMorphologicalAnalyzer;
    constructPhraseIndex(): boolean;
    normalizeDocument(): boolean;
    constructPositionalIndex(): boolean;
    constructNGramIndex(): boolean;
    limitNumberOfDocumentsLoaded(): boolean;
    getDocumentLimit(): number;
    getWordLimit(): number;
    getRepresentativeCount(): number;
    setIndexType(indexType: IndexType): void;
    setWordComparator(wordComparator: WordComparator): void;
    setLoadIndexesFromFile(loadIndexesFromFile: boolean): void;
    setDisambiguator(disambiguator: MorphologicalDisambiguator): void;
    setFsm(fsm: FsmMorphologicalAnalyzer): void;
    setNormalizeDocument(normalizeDocument: boolean): void;
    setPhraseIndex(phraseIndex: boolean): void;
    setPositionalIndex(positionalIndex: boolean): void;
    setNGramIndex(nGramIndex: boolean): void;
    setLimitNumberOfDocumentsLoaded(limitNumberOfDocumentsLoaded: boolean): void;
    setDocumentLimit(documentLimit: number): void;
    setWordLimit(wordLimit: number): void;
    setRepresentativeCount(representativeCount: number): void;
    getDocumentType(): DocumentType;
    setDocumentType(documentType: DocumentType): void;
}
